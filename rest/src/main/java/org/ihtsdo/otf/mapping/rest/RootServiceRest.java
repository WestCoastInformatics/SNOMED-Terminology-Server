package org.ihtsdo.otf.mapping.rest;

import java.io.File;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;

import org.apache.log4j.Logger;
import org.ihtsdo.otf.mapping.helpers.LocalException;
import org.ihtsdo.otf.mapping.helpers.User;

/**
 * Top level class for all REST services.
 */
public class RootServiceRest {

	//
	// Fields
	//

	/** The config. */
	public Properties config = null;

	/** The address that messages will appear as though they come from. */
	String m_from = "";

	/** The password for the SMTP host. */
	String host_password = "";

	/** The SMTP host that will be transmitting the message. */
	String host = "";

	/** The port on the SMTP host. */
	String port = "";

	/** The list of addresses to send the message to. */
	String recipients = "";

	/** Text for the email. */
	String m_text;

	/** Format for logging */
	SimpleDateFormat ft = new SimpleDateFormat("hh:mm:ss a");

	/**
	 * Returns the config properties.
	 *
	 * @throws Exception
	 *             the exception
	 */
	public void getConfigProperties() throws Exception {

		if (config == null) {

			String configFileName = System.getProperty("run.config");
			Logger.getLogger(this.getClass()).info(
					"  run.config = " + configFileName);
			config = new Properties();
			FileReader in = new FileReader(new File(configFileName));
			config.load(in);
			in.close();

			m_from = config.getProperty("mail.smtp.user");
			host_password = config.getProperty("mail.smtp.password");
			host = config.getProperty("mail.smtp.host");
			port = config.getProperty("mail.smtp.port");
			recipients = config.getProperty("mail.smtp.to");

			Logger.getLogger(this.getClass()).info("  properties = " + config);
		}

	}

	/**
	 * Handle exception.
	 *
	 * @param e
	 *            the e
	 * @param whatIsHappening
	 *            the what is happening
	 * @throws WebApplicationException
	 *             the web application exception
	 */
	public void handleException(Exception e, String whatIsHappening)
			throws WebApplicationException {
		handleException(e, whatIsHappening, "", "", "");
	}

	/**
	 * Handle exception. For {@link LocalException} print the stack trace and
	 * inform the user with a message generated by the application. For all
	 * other exceptions, also send email to administrators with the message and
	 * the stack trace.
	 *
	 * @param e
	 *            the e
	 * @param whatIsHappening
	 *            the what is happening
	 * @param userName
	 *            the current user
	 * @param project
	 *            the map project
	 * @param recordId
	 *            the map record id
	 * @throws WebApplicationException
	 *             the web application exception
	 */
	public void handleException(Exception e, String whatIsHappening,
			String userName, String project, String recordId)
			throws WebApplicationException {

		e.printStackTrace();
		if (e instanceof LocalException) {
			throw new WebApplicationException(Response.status(500)
					.entity(e.getMessage()).build());
		}

		if (e instanceof WebApplicationException) {
			throw (WebApplicationException) e;
		}

		try {
			getConfigProperties();
			// TODO
			// sendEmail(e, whatIsHappening, userName, project, recordId);
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new WebApplicationException(Response.status(500)
					.entity(ex.getMessage()).build());
		}

		throw new WebApplicationException(Response
				.status(500)
				.entity("Unexpected error trying to " + whatIsHappening
						+ ". Please contact the administrator.").build());
	}

	  
	/**
	 * Sends email.
	 *
	 * @param subject the subject
	 * @param recipients the recipients
	 * @param body the body
	 * @param details the details
	 */
	public void sendEmail(String subject, User[] recipients, String body,
			Properties details) {

		Properties props = new Properties();
		props.put("mail.smtp.user", m_from);
		props.put("mail.smtp.password", host_password);
		props.put("mail.smtp.host", host);
		props.put("mail.smtp.port", port);
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.auth", "true");

		try {
			m_subject = subject;
			String[] recipientsArray = new String[recipients.length];
			int i = 0;
			for (User user : recipients) {
				recipientsArray[i++] = user.getEmail();
			}

			m_text = body;

			Authenticator auth = new SMTPAuthenticator();
			Session session = Session.getInstance(props, auth);

			MimeMessage msg = new MimeMessage(session);
			msg.setText(m_text.toString());
			msg.setSubject(m_subject);
			msg.setFrom(new InternetAddress(m_from));
			for (String recipient : recipientsArray) {
				msg.addRecipient(Message.RecipientType.TO, new InternetAddress(
						recipient));
			}
			Transport.send(msg);

		} catch (Exception mex) {
			mex.printStackTrace();
		}
	}

	/**
	 * SMTPAuthenticator.
	 */
	public class SMTPAuthenticator extends javax.mail.Authenticator {

		/*
		 * (non-Javadoc)
		 * 
		 * @see javax.mail.Authenticator#getPasswordAuthentication()
		 */
		@Override
		public PasswordAuthentication getPasswordAuthentication() {
			return new PasswordAuthentication(m_from, host_password);
		}
	}

	/** Subject text for the email. */
	String m_subject = "IHTSDO Mapping Tool Exception Report";

}
